# Majestic Health Dashboard - Complete System Graph

## Overview Diagram

```
┌─────────────────────────────────────────────────────────────┐
│                    MAJESTIC SYSTEM                          │
├─────────────────────────────────────────────────────────────┤
│  Frontend (Vanilla JS SPA)                                 │
│  ├── Authentication & User Management                       │
│  ├── Dashboard (13 System Tiles)                           │
│  ├── Upload Interface (Drag & Drop)                        │
│  ├── Drill-down Modals                                     │
│  └── Trends Visualization                                  │
├─────────────────────────────────────────────────────────────┤
│  Backend API Layer (Express.js)                            │
│  ├── Auth Routes (/api/auth)                               │
│  ├── Upload Routes (/api/uploads)                          │
│  ├── Metrics Routes (/api/metrics)                         │
│  ├── Dashboard Routes (/api/dashboard)                     │
│  ├── Unified Ingestion (/api/ingestFile)                   │
│  └── Imaging Studies (/api/imaging-studies)                │
├─────────────────────────────────────────────────────────────┤
│  Services Layer                                            │
│  ├── OpenAI Service (GPT-4o Integration)                   │
│  ├── Health Systems Service                                │
│  ├── Authentication Service                                │
│  ├── Ingestion Service (Unified Pipeline)                  │
│  ├── Visual Study Service                                  │
│  ├── Thumbnail Service                                     │
│  ├── Queue Service (Bull/Redis)                            │
│  └── Insights Refresh Service                              │
├─────────────────────────────────────────────────────────────┤
│  Database Layer (PostgreSQL)                               │
│  ├── Core Tables (users, health_systems, uploads)          │
│  ├── Metrics & Lab Data (metrics)                          │
│  ├── Visual Studies (imaging_studies)                      │
│  ├── Custom Metrics (user_custom_metrics)                  │
│  ├── AI Logs (ai_outputs_log)                              │
│  └── User Interactions (questionnaire_responses)           │
└─────────────────────────────────────────────────────────────┘
```

## 1. DATABASE STRUCTURE

### Core Tables

**users**
```sql
- id (SERIAL PRIMARY KEY)
- email (VARCHAR(255) UNIQUE NOT NULL)
- google_id (VARCHAR(255) UNIQUE)
- name (VARCHAR(255))
- avatar_url (TEXT)
- created_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
- updated_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
```

**health_systems**
```sql
- id (INTEGER PRIMARY KEY)
- name (VARCHAR(100) NOT NULL)
- description (TEXT)
- created_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
```

**uploads**
```sql
- id (SERIAL PRIMARY KEY)
- user_id (INTEGER REFERENCES users(id) ON DELETE CASCADE)
- filename (VARCHAR(255) NOT NULL)
- file_type (VARCHAR(50))
- file_size (INTEGER)
- upload_type (VARCHAR(50) DEFAULT 'manual')
- storage_path (TEXT)
- processing_status (VARCHAR(50) DEFAULT 'pending')
- processing_error (TEXT)
- created_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
- processed_at (TIMESTAMP)
```

**metrics**
```sql
- id (SERIAL PRIMARY KEY)
- user_id (INTEGER REFERENCES users(id) ON DELETE CASCADE)
- upload_id (INTEGER REFERENCES uploads(id) ON DELETE CASCADE)
- system_id (INTEGER REFERENCES health_systems(id))
- metric_name (VARCHAR(255) NOT NULL)
- metric_value (DECIMAL)
- metric_unit (VARCHAR(50))
- reference_range (TEXT)
- is_key_metric (BOOLEAN DEFAULT false)
- is_outlier (BOOLEAN DEFAULT false)
- test_date (DATE)
- created_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
- UNIQUE(user_id, metric_name, test_date, upload_id)
```

**imaging_studies** (Phase 1 Visual Pipeline)
```sql
- id (SERIAL PRIMARY KEY)
- user_id (INTEGER REFERENCES users(id) ON DELETE CASCADE)
- linked_system_id (INTEGER REFERENCES health_systems(id))
- study_type (VARCHAR(100))
- file_url (TEXT)
- thumbnail_url (TEXT)
- test_date (DATE)
- ai_summary (TEXT)
- metrics_json (JSONB)
- comparison_summary (TEXT)
- metric_changes_json (JSONB)
- status (VARCHAR(50) DEFAULT 'pendingProcessing')
- created_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
- updated_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
```

**user_custom_metrics** (Text-based Custom Metrics)
```sql
- id (SERIAL PRIMARY KEY)
- system_id (INTEGER REFERENCES health_systems(id))
- user_id (INTEGER REFERENCES users(id) ON DELETE CASCADE)
- metric_name (VARCHAR(255) NOT NULL)
- value (DECIMAL)
- units (VARCHAR(50))
- normal_range_min (DECIMAL)
- normal_range_max (DECIMAL)
- range_applicable_to (VARCHAR(50) DEFAULT 'All')
- source_type (VARCHAR(20) DEFAULT 'user')
- review_status (VARCHAR(20) DEFAULT 'pending')
- created_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
```

**ai_outputs_log**
```sql
- id (SERIAL PRIMARY KEY)
- user_id (INTEGER REFERENCES users(id) ON DELETE CASCADE) 
- system_id (INTEGER) -- Added for per-system insights caching
- output_type (VARCHAR(100) NOT NULL)
- prompt (TEXT NOT NULL)
- response (TEXT NOT NULL)
- model_version (VARCHAR(50) DEFAULT 'gpt-4o')
- processing_time_ms (INTEGER)
- created_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
```

**questionnaire_responses**
```sql
- id (SERIAL PRIMARY KEY)
- user_id (INTEGER REFERENCES users(id) ON DELETE CASCADE)
- question_type (VARCHAR(255) NOT NULL)
- question (TEXT NOT NULL)
- response (TEXT NOT NULL)
- response_date (DATE DEFAULT CURRENT_DATE)
- created_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
```

### Database Indexes
```sql
- idx_metrics_user_system ON metrics(user_id, system_id)
- idx_metrics_test_date ON metrics(test_date)
- idx_uploads_user_status ON uploads(user_id, processing_status)
- idx_ai_outputs_user_type ON ai_outputs_log(user_id, output_type)
- idx_imaging_studies_user_system ON imaging_studies(user_id, linked_system_id)
- idx_imaging_studies_type_date ON imaging_studies(study_type, test_date)
```

### Relationships
- **users** → **uploads** (1:many, CASCADE DELETE)
- **users** → **metrics** (1:many, CASCADE DELETE)
- **users** → **imaging_studies** (1:many, CASCADE DELETE)
- **users** → **user_custom_metrics** (1:many, CASCADE DELETE)
- **users** → **ai_outputs_log** (1:many, CASCADE DELETE)
- **health_systems** → **metrics** (1:many)
- **health_systems** → **imaging_studies** (1:many)
- **health_systems** → **user_custom_metrics** (1:many)
- **uploads** → **metrics** (1:many, CASCADE DELETE)

## 2. BACKEND STRUCTURE

### API Endpoints

**Authentication Routes** (`/api/auth`)
- `POST /api/auth/google` - Google OAuth login
- `POST /api/auth/demo` - Demo login for testing
- `GET /api/auth/me` - Get current user profile
- `PUT /api/auth/profile` - Update user profile
- `DELETE /api/auth/account` - Delete user account
- `POST /api/auth/logout` - Logout (client-side token removal)

**Upload Routes** (`/api/uploads`) [AUTH REQUIRED]
- `POST /api/uploads` - Upload files (max 5 files, 10MB each)
- `GET /api/uploads` - Get upload history (paginated)
- `GET /api/uploads/:id` - Get upload details
- `POST /api/uploads/:id/retry` - Retry failed upload processing
- `DELETE /api/uploads/:id` - Delete upload

**Metrics Routes** (`/api/metrics`) [AUTH REQUIRED]
- `GET /api/metrics` - Get all metrics with filters
- `GET /api/metrics/system/:systemId` - Get system-specific metrics
- `GET /api/metrics/types?systemId=X` - Get metric types for dropdown (official + custom)
- `GET /api/metrics/trends?metrics=X,Y,Z` - Get trend data
- `POST /api/metrics` - Manual metric entry
- `PUT /api/metrics/:id` - Update metric (with custom validation)
- `DELETE /api/metrics/:id` - Delete metric
- `GET /api/metrics/export/:format` - Export metrics (CSV/JSON)
- `GET /api/metrics/reference` - Get reference metrics data (PUBLIC)

**Dashboard Routes** (`/api/dashboard`) [AUTH REQUIRED]
- `GET /api/dashboard` - Main dashboard with 13 system tiles
- `GET /api/dashboard/daily-plan` - Get latest daily plan
- `GET /api/dashboard/daily-plans/history` - Get historical daily plans
- `POST /api/dashboard/daily-plan/regenerate` - Force regenerate daily plan
- `GET /api/dashboard/insights/:systemId` - Get system insights
- `GET /api/dashboard/activity` - Get activity feed
- `GET /api/dashboard/stats` - Get dashboard statistics

**Custom Metrics Routes** (`/api/metrics/custom`) [AUTH REQUIRED]
- `GET /api/metrics/custom?systemId=X` - Get custom metrics for system
- `POST /api/metrics/custom` - Add new custom metric
- `PUT /api/metrics/custom/:id` - Edit custom metric
- `DELETE /api/metrics/custom/:id` - Delete custom metric
- `GET /api/metrics/custom/export` - Export custom metrics (ADMIN ONLY)
- `POST /api/metrics/custom/import` - Import custom metrics CSV (ADMIN ONLY)

**Unified Ingestion Pipeline** (`/api/ingestFile`) [AUTH REQUIRED]
- `POST /api/ingestFile` - Main unified ingestion endpoint (JPEG, PNG, PDF, DICOM)

**Imaging Studies Routes** (`/api/imaging-studies`) [AUTH REQUIRED]
- `GET /api/imaging-studies` - Get all imaging studies (paginated)
- `GET /api/imaging-studies/:id` - Get specific study details
- `GET /api/imaging-studies/system/:systemId` - Get studies for specific system
- `GET /api/imaging-studies/stats/summary` - Get study statistics

**Email Webhook** (No Auth)
- `POST /api/webhook/email` - Email ingestion webhook

**Health Check** (Public)
- `GET /api/health` - Health check endpoint

### Key Functions by Service

**AuthService** (`services/auth.js`)
- `findOrCreateUser(googleUserData)` → User object | Reads: users | Writes: users
- `generateToken(user)` → JWT string | Reads: none | Writes: none
- `verifyToken(token)` → Decoded payload | Reads: none | Writes: none
- `getUserById(userId)` → User object | Reads: users | Writes: none
- `updateUserProfile(userId, updates)` → Updated user | Reads: users | Writes: users
- `deleteUser(userId)` → Success status | Reads: users | Writes: users (CASCADE)

**HealthSystemsService** (`services/healthSystems.js`)
- `getSystemDashboard(userId)` → Dashboard tiles array | Reads: metrics, health_systems | Writes: none
- `getSystemDetails(userId, systemId)` → System metrics & details | Reads: metrics, health_systems | Writes: none
- `mapMetricToSystem(metricName, category)` → System ID | Reads: none | Writes: none
- `isKeyMetric(systemId, metricName)` → Boolean | Reads: none | Writes: none
- `getTrendData(userId, metricNames)` → Trend analysis | Reads: metrics | Writes: none

**IngestionService** (`services/ingestionService.js`)
- `processFile({userId, file, testDate})` → Processing result | Reads: multiple | Writes: multiple
- `classifyFile(file)` → Classification result | Reads: none | Writes: none
- `processLabFile(userId, file, testDate)` → Lab processing result | Reads: uploads | Writes: uploads, metrics
- `processVisualFile(userId, file, testDate, classification)` → Visual processing result | Reads: imaging_studies | Writes: imaging_studies

**OpenAIService** (`services/openai.js`)
- `generateCompletion(prompt, base64Data, fileName)` → AI response | Reads: none | Writes: ai_outputs_log
- `processLabReport(base64Data, fileName)` → Extracted metrics | Reads: none | Writes: ai_outputs_log
- `processPDFWithFilesAPI(base64Data, fileName)` → PDF extraction result | Reads: none | Writes: ai_outputs_log
- `generateSystemInsights(userId, systemId)` → System insights | Reads: metrics, health_systems | Writes: ai_outputs_log
- `generateDailyPlan(userId)` → Daily plan | Reads: metrics, health_systems | Writes: ai_outputs_log

**VisualStudyService** (`services/visualStudyService.js`)
- `processVisualStudy({userId, file, testDate, studyType, linkedSystemId})` → Study result | Reads: imaging_studies | Writes: imaging_studies
- `extractStudyMetrics(base64Data, studyType)` → Metrics array | Reads: none | Writes: none
- `compareWithPreviousStudies(userId, studyType, currentMetrics)` → Comparison analysis | Reads: imaging_studies | Writes: none

**ThumbnailService** (`services/thumbnailService.js`)
- `generateThumbnail(filePath, outputPath)` → Thumbnail path | Reads: file system | Writes: file system
- `generatePDFThumbnail(filePath, outputPath)` → PDF thumbnail | Reads: file system | Writes: file system

**QueueService** (`services/queue.js`)
- `init()` → Queue initialization | Reads: none | Writes: none
- `addJob(jobType, data)` → Job result | Reads: none | Writes: queue
- `processUploadJob(job)` → Upload processing | Reads: uploads | Writes: uploads, metrics
- `processDailyPlanJob(job)` → Daily plan generation | Reads: metrics | Writes: ai_outputs_log

**InsightsRefreshService** (`services/insightsRefresh.js`)
- `processMetricEdit(db, userId, metricId, updatedMetric)` → Refresh result | Reads: metrics, ai_outputs_log | Writes: ai_outputs_log
- `determineRefreshScope(db, userId, metricName, systemId)` → Refresh scope | Reads: metrics | Writes: none
- `batchProcessInsightsRefresh(refreshRequests)` → Batch results | Reads: multiple | Writes: multiple

## 3. FRONTEND STRUCTURE

### Pages and Components

**Main Application** (`public/app.js`)
- **HealthDashboard Class**
  - State: `apiBase`, `token`, `user`, `dashboard`, `systemsData`, `isRefreshingInsights`
  - Methods: `init()`, `setupEventListeners()`, `loadDashboard()`, `loadDailyPlan()`, `loadUploads()`, `loadTrends()`

**Authentication Components**
- Login Modal: Demo login, Google OAuth placeholder
- User Profile: Name display, logout functionality

**Dashboard Components**
- System Tiles: 13 health system cards with color coding (Green/Yellow/Red/Gray)
- Tile Data: `systemName`, `totalMetricsCount`, `keyMetricsCount`, `color`, `lastUpdated`
- System Drill-down Modals: Full-width modals with metric tables and AI insights

**Upload Interface**
- Drag & Drop Zone: Multi-file upload support
- File Processing Feedback: Real-time progress and results
- Upload History: Paginated list with processing status

**Trends Visualization**
- Plotly.js Integration: Interactive charts for metric trends
- Supported Metrics: LDL, ApoB, CRP, hs-CRP, IL-6
- Time Series Data: Value progression over time

**Metric Management**
- Inline Editing: Direct table cell editing in drill-down modals
- Custom Metric Creation: Text-based metric type creation during edit flow
- Validation System: Three-tier validation (official → approved custom → user pending)

### Data Flow (Frontend → Backend)

**Authentication Flow**
1. `POST /api/auth/demo` → Set `localStorage.authToken`
2. All subsequent API calls include `Authorization: Bearer ${token}`
3. `GET /api/auth/me` → Load user profile

**Dashboard Flow**
1. `GET /api/dashboard` → Load system tiles and summary
2. System tile click → `GET /api/metrics/system/${systemId}` → Load system details
3. `GET /api/dashboard/insights/${systemId}` → Load AI insights for system

**Upload Flow**
1. File selection → `POST /api/ingestFile` → Unified pipeline processing
2. Alternative: `POST /api/uploads` → Traditional upload pipeline
3. Real-time feedback display → Processing results and extracted metrics

**Metric Editing Flow**
1. Edit metric in table → `PUT /api/metrics/${metricId}` → Update metric
2. If custom metric name → `GET /api/metrics/types?systemId=X` → Validate metric name
3. If new custom → Custom metric creation modal → `POST /api/metrics/custom`

## 4. VARIABLES AND CONSTANTS

### Environment Variables
```
- PORT (default: 5000)
- DATABASE_URL (PostgreSQL connection)
- OPENAI_API_KEY (GPT-4o API access)
- GOOGLE_CLIENT_ID (Google OAuth)
- JWT_SECRET (JWT signing secret)
- REDIS_URL (Queue backend, optional)
- NODE_ENV (production/development)
- SKIP_GLOBAL_JOBS (true/false, disables background jobs)
```

### Global Constants

**Health Systems** (`database/schema.js`)
```javascript
const HEALTH_SYSTEMS = [
  { id: 1, name: 'Cardiovascular', description: 'Heart and blood vessel health' },
  { id: 2, name: 'Nervous/Brain', description: 'Cognitive and neurological function' },
  { id: 3, name: 'Respiratory', description: 'Lung and breathing function' },
  { id: 4, name: 'Muscular', description: 'Muscle mass and strength' },
  { id: 5, name: 'Skeletal', description: 'Bone health and density' },
  { id: 6, name: 'Digestive', description: 'Gut health and liver function' },
  { id: 7, name: 'Endocrine', description: 'Hormone regulation and metabolism' },
  { id: 8, name: 'Urinary', description: 'Kidney and urinary function' },
  { id: 9, name: 'Reproductive', description: 'Reproductive hormone health' },
  { id: 10, name: 'Integumentary', description: 'Skin, hair, and nail health' },
  { id: 11, name: 'Immune/Inflammation', description: 'Immune system and inflammation markers' },
  { id: 12, name: 'Sensory', description: 'Vision, hearing, and sensory function' },
  { id: 13, name: 'Biological Age', description: 'Cellular aging and longevity markers' }
];
```

**File Upload Limits**
- File Size: 10MB (uploads) / 50MB (unified ingestion)
- File Count: 5 files per request
- Rate Limit: 5 uploads per hour per user

**OpenAI Configuration**
- Model: `gpt-4o`
- Max Tokens: 2000-4000
- Temperature: 0.1

### Status Enums

**Processing Status** (uploads table)
- `pending`, `completed`, `failed`

**Study Status** (imaging_studies table)
- `pendingProcessing`, `processed`, `failedExtraction`

**Review Status** (user_custom_metrics table)
- `pending`, `approved`, `rejected`

**Source Type** (user_custom_metrics table)
- `user`, `official`

**Study Types** (imaging_studies table)
- `eye_topography`, `oct`, `fundus`, `mri`, `ct`, `xray`, `dexa`, `ecg`, `eeg`, `unknown`

## 5. RELATIONSHIPS & DEPENDENCIES

### Data Flow: End-to-End Workflows

**Lab Upload → Database → Dashboard**
```
File Upload → OpenAI Processing → Metrics Extraction → Database Storage → Dashboard Refresh → System Tile Color Update → AI Insights Generation
```

**Visual Study Processing**
```
Image/PDF Upload → Classification → Visual Study Processing → Metrics JSON → Thumbnail Generation → System Linking → Dashboard Display
```

**Metric Editing → AI Refresh**
```
Metric Edit → Validation → Database Update → Insights Refresh Service → GPT-4o Recomputation → Cache Update → Frontend Refresh
```

### Critical API ↔ Database Mappings

- `GET /api/dashboard` → Reads: `metrics`, `health_systems`, `ai_outputs_log`
- `POST /api/uploads` → Writes: `uploads`, `metrics` (via queue)
- `POST /api/ingestFile` → Writes: `imaging_studies` OR `uploads`+`metrics` (based on classification)
- `GET /api/metrics/system/:id` → Reads: `metrics`, `health_systems`
- `PUT /api/metrics/:id` → Writes: `metrics`, triggers insights refresh → `ai_outputs_log`
- `GET /api/dashboard/insights/:systemId` → Reads: `ai_outputs_log` (with system_id index)

### Service Dependencies

```
IngestionService → OpenAIService, VisualStudyService, ThumbnailService
HealthSystemsService → Database (metrics, health_systems)
InsightsRefreshService → OpenAIService, Database (ai_outputs_log)
QueueService → All processing services
AuthService → Database (users)
```

## 6. CRITICAL FLOWS (ANNOTATED)

### [1] Metric Ingestion (Labs)
**Tables**: `uploads`, `metrics`, `ai_outputs_log`
**Functions**: `OpenAIService.processLabReport()`, `HealthSystemsService.mapMetricToSystem()`
**Components**: Upload interface, Dashboard tiles
**Flow**: Upload → OCR/PDF processing → Metric extraction → System mapping → Database storage → Dashboard refresh

### [2] Imaging Ingestion (Visual Studies)
**Tables**: `imaging_studies`, `ai_outputs_log`
**Functions**: `IngestionService.processVisualFile()`, `VisualStudyService.processVisualStudy()`, `ThumbnailService.generateThumbnail()`
**Components**: Unified upload interface, System drill-down modals
**Flow**: Upload → Classification → GPT-4o analysis → Metrics JSON → Thumbnail → System linking → Display

### [3] Metric Editing + Add Metric Flow
**Tables**: `metrics`, `user_custom_metrics`, `ai_outputs_log`
**Functions**: `validateMetricName()`, `InsightsRefreshService.processMetricEdit()`
**Components**: Drill-down table editing, Custom metric modal
**Flow**: Inline edit → Validation → Custom metric creation (if needed) → Database update → AI insights refresh → Frontend update

### [4] AI Insights System
**Tables**: `ai_outputs_log`, `metrics`, `health_systems`
**Functions**: `OpenAIService.generateSystemInsights()`, `InsightsRefreshService.batchProcessInsightsRefresh()`
**Components**: System drill-down insights panels
**Flow**: Metric changes → Batched refresh (60s window) → GPT-4o analysis → Cache with system_id → Frontend display

## 7. MISSING OR DUPLICATE ENDPOINTS

### Missing Endpoints (Identified)
- **NONE IDENTIFIED** - All major functionality appears to have corresponding endpoints

### Duplicate Endpoints (Identified)
- `PUT /api/metrics/:id` appears twice in `routes/metrics.js` (lines 304 and 510) - **DUPLICATE DETECTED**
- Both implement metric updates but with different validation approaches

### API Consistency Issues
- Some endpoints use `metricId` vs `id` parameter names
- Mixed response formats between services (some return arrays, others objects with metadata)

---

**System Completeness**: This graph represents the complete Majestic system as of August 2025, including Phase 1 unified ingestion pipeline, text-based custom metrics, AI insights caching, and comprehensive visual studies processing. All major data flows, API endpoints, and database relationships are documented for future automated validation.