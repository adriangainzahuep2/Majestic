==================================================

MANDATORY CHANGES (TEXT-BASED METRIC NAMES)

==================================================

Key Principle
	•	metrics.metric_name remains a TEXT field (no foreign keys).
	•	Custom metric types (from user_custom_metrics) expand the allowed values but do not change the schema.

⸻

1. EDIT VS ADD BEHAVIOR
	•	When a user EDITS an existing metric row (from the metrics table):
	•	If the user selects a new metric type from the dropdown:
	•	Send PUT /metrics/:id to update metric_name (string), metric_unit, etc.
	•	No new metric row is created.
	•	If the metric type is not in the dropdown and the user clicks ”+ Add Metric”:
	•	Create a new entry in user_custom_metrics (source_type=user, review_status=pending).
	•	Immediately update metrics.metric_name with the new string value.
	•	Do NOT create a duplicate metric row.

⸻

2. INLINE “+ ADD METRIC” IN DROPDOWN
	•	Dropdown uses a merged list of metric names:
	•	All official metric names from reference data
	•	All approved custom metric names (source_type=official)
	•	The current user’s own pending metric names
	•	If no match is found:
	•	Show ”+ Add ”
	•	Clicking opens a modal to define details (units, normal ranges, gender).
	•	On Save:
	•	Save the new metric type to user_custom_metrics (pending approval)
	•	Update the metrics.metric_name text field to this new name (PUT /metrics/:id)
	•	UI FIX: Ensure all text in the modal has a visible contrasting color.

⸻

3. DROPDOWN POPULATION (NEW ENDPOINT)

Add a new endpoint:
GET /metrics/types?systemId=X

Returns:

{
  "officialMetricNames": [...],
  "approvedCustomMetricNames": [...],
  "userPendingMetricNames": [...]
}

⸻

4. VALIDATION LOGIC (UPDATED)

Current behavior:
	•	Validation checks only against official reference metric names.

Required new behavior:
	•	Extend validation in routes/metrics.js so that:
	1.	Official metrics: Validate against reference data.
	2.	Approved custom metrics: Validate against user_custom_metrics where source_type='official'.
	3.	Pending custom metrics: Allow only for the user who created them.

This ensures valid editing and new metric assignment while respecting pending state.

⸻

5. ADMIN REVIEW WORKFLOW (UPDATED)
	•	Admin reviews user_custom_metrics via CSV.
	•	If approved: source_type=official → name becomes valid globally.
	•	If not approved: Admin deletes that row from the CSV.
There is no “rejected” state.

⸻

6. DATA INTEGRITY WHEN ADMIN DELETES A METRIC TYPE
	•	If a custom metric type is deleted during admin review:
	•	Any existing metrics.metric_name values that already use that text remain unchanged (historical data).
	•	The deleted type will no longer appear in dropdowns for future edits.
	•	Users can re-edit those metrics and reassign them to a valid type later.

No “rejected” status is used.
Only pending and official states exist.

⸻

7. SEPARATE FLOWS
	•	Edit flow:
Always PUT /metrics/:id (string-based update).
	•	Add flow:
Remove manual “Add Metric” button from the Additional Metrics table.
Users cannot create metrics outside of editing.

⸻

8. FRONTEND UI
	•	Remove the standalone “+ Add Metric” button in Additional Metrics header.
	•	Dropdown list must be sourced from GET /metrics/types?systemId=X.
	•	When editing, the only way to add a new metric type is via the inline modal.

⸻

==================================================

IMPORTANT NOTES

==================================================
	•	metrics.metric_name remains TEXT (no foreign keys).
	•	user_custom_metrics table holds additional metadata for new metric names.
	•	No schema changes; only new validation, dropdown endpoint, and UI flow.
	•	Ensure backward compatibility: existing metric rows continue to work as plain text.

⸻